#! /usr/bin/env node
let { existsSync, writeFileSync } = require('fs')
let { execSync } = require('child_process')
let { join } = require('path')
let { prune } = require('@architect/plugin-node-prune')
let { DEPLOY, BUILD_ALL } = process.env
let os = process.platform
let arch = process.arch
console.log(`Building Begin... (DEPLOY: ${DEPLOY}, BUILD_ALL: ${BUILD_ALL})`)

/**
 * Node versions: `node14`, `node16`, or latest
 * Platforms:     `alpine`, `linux`, `linuxstatic`, `win`, `macos`
 * Architectures: `x64`, `arm64`
 */
let config = {
  name: 'begin',
  bin: {
    cli: '../src/index.js'
  },
  pkg: {
    // Don't manually include runtimes/deno.js in scripts, as it fails on pkg#997
    scripts: [
      // Begin stuff
      // Some commands have dynamically required subcommands, so just grab everything
      '../src/commands/**/*.js',
      // Arc stuff
      '../node_modules/@architect/inventory/**/*.js',
      '../node_modules/dynalite/**/*.js',
    ],
    assets: [
      '../node_modules/@architect/sandbox/src/invoke-lambda/exec/runtimes/*',
      '../package.json',
      // Enhance stuff
      '../node_modules/@enhance/starter-project/**/*',
    ],
    targets: [],
    outputPath: 'build',
  }
}

// Main version is derived from the latest git commit
if (DEPLOY === 'main') {
  let cmd = 'git rev-parse HEAD'
  let result = execSync(cmd)
  if (!result) {
    throw ReferenceError('Missing build sha')
  }
  let sha = result.toString().substr(0, 7)
  let appVersion = `main-${sha}`
  let commitFile = join(__dirname, '..', 'commit')
  writeFileSync(commitFile, appVersion)
  config.bin.cli = '../src/_main.js'
  config.pkg.assets.push('../commit')
}

// Handle client IDs in main or prod (and optionally locally)
// However, client IDs should not be required for local testing
let clientIDFile = join(__dirname, '..', 'client-ids.json')
if (DEPLOY) {
  let staging = process.env.BEGIN_CLI_CLIENT_ID_STAGING
  let production = process.env.BEGIN_CLI_CLIENT_ID_PRODUCTION
  if (!staging || !production) {
    throw ReferenceError('Missing staging and/or production client ID')
  }
  let clientIDs = JSON.stringify({ staging, production })
  writeFileSync(clientIDFile, clientIDs)
}
if (existsSync(clientIDFile)) {
  config.pkg.assets.push('../client-ids.json')
}

let nodeVer = `node18`
let platforms = {
  darwin_x64: `${nodeVer}-macos-x64`,
  darwin_arm64: `${nodeVer}-macos-arm64`,
  linux: `${nodeVer}-linux-x64`, // TODO arm64
  win32: `${nodeVer}-win-x64`,
}

// TODO ↓ remove me! ↓
console.log(`BUILD_ALL:`, BUILD_ALL)
console.log(`os:`, os)
console.log(`arch:`, arch)
if (BUILD_ALL === 'true') {
  // The self-hosted GHA Runner is currently only responsible for macOS arm64 builds
  if (os === 'darwin' && arch === 'arm64') {
    config.pkg.targets.push(
      platforms.darwin_arm64
    )
  }
  // Everything else can be reliably built from Linux
  else {
    config.pkg.targets.push(
      platforms.darwin_x64,
      platforms.linux,
      platforms.win32,
    )
  }
}
else {
  // In theory we could use the 'host' alias, but the Node.js version won't be pinned to 14
  let target = os === 'darwin' ? platforms[`darwin_${arch}`] : platforms[os]
  config.pkg.targets.push(target)
}
// TODO ↓ remove me! ↓
console.log(`config.pkg.targets:`, config.pkg.targets)

let path = join(__dirname, 'package.json')
writeFileSync(path, JSON.stringify(config, null, 2))

// Tidy up node_modules before compiling!
console.log('Pruning junk from project node_modules:')
process.env.ARC_PRUNE_IGNORE_CUSTOM = '-not -path *istanbul*'
prune(join(__dirname, '..'))
delete process.env.ARC_PRUNE_IGNORE_CUSTOM
