#! /usr/bin/env node
let aws = require('aws-sdk')
let { getVersion, region } = require('./lib')

let { DEPLOY, CF_DISTRO: DistributionId, LATEST_API: FunctionName } = process.env
if (!DEPLOY) throw ReferenceError('Missing DEPLOY config!')
if (!DistributionId) throw ReferenceError('Missing CF_DISTRO config!')
if (!FunctionName) throw ReferenceError('Missing LATEST_API config!')
let valid = [ 'prod', 'main' ]
if (!valid.includes(DEPLOY)) throw ReferenceError(`DEPLOY must be one of: ${valid.join(', ')}`)

let cf = new aws.CloudFront()
let lambda = new aws.Lambda({ region })
let ssm = new aws.SSM({ region })

;(async () => {
  try {
    let isProd = DEPLOY === 'prod'
    let version = await getVersion()
    let channel = isProd ? 'latest' : 'main'

    // Flush CDN release channel
    let releasePath = `/releases/${channel}/*`
    await cf.createInvalidation({
      DistributionId,
      InvalidationBatch: {
        CallerReference: `${channel}-${new Date().toISOString()}`,
        Paths: { Quantity: 1, Items: [ releasePath ] }
      }
    }).promise()
    console.log(`Invalidated ${releasePath}`)

    let uri = ext => `https://dl.begin.com/releases/${channel}/begin-${ext}`
    let data = {
      [`ver_${channel}`.toUpperCase()]: version,
      [`releases_${channel}`.toUpperCase()]: JSON.stringify({
        darwin: {
          arm64: uri('arm64-darwin.zip'),
          x64: uri('x64-darwin.zip'),
        },
        linux: {
          arm64: null,
          x64: uri('x64-linux.zip'),
        },
        windows: {
          arm64: null,
          x64: uri('x64-windows.zip'),
        }
      })
    }
    for (let [ key, Value ] of Object.entries(data)) {
      // Update env vars
      let params = {
        Name: `/begin-install/production/${key}`,
        Value,
        Type: 'SecureString',
        Overwrite: true
      }
      await ssm.putParameter(params).promise()
      console.log(`Updated ${key}`)
    }

    // Update `dl.begin.com/versions` config
    let config = await lambda.getFunctionConfiguration({ FunctionName }).promise()
    let Environment = { Variables: { ...config.Environment.Variables, ...data } }
    await lambda.updateFunctionConfiguration({ FunctionName, Environment }).promise()
    console.log(`Updated dl.begin.com/latest`)
  }
  catch (err) {
    console.log('Deploy failed!', err)
    process.exit(1)
  }
})()
